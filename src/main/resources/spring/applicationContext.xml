<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context-4.0.xsd
						http://www.springframework.org/schema/aop 
       					http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
       					http://www.springframework.org/schema/tx
       					http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
       				    http://www.springframework.org/schema/task
       				    http://www.springframework.org/schema/task/spring-task.xsd">
  <import resource="../nacos.xml" />
  <context:annotation-config/>
    <aop:aspectj-autoproxy expose-proxy="true"/>
    <context:component-scan base-package="com.nacos">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation"
                                expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>
    <!-- 属性文件读入 -->
<!--    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
            </list>
        </property>
    </bean>-->
    <!--数据库连接池配置-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="url" value="${datasource.url}"/>
        <property name="username" value="${datasource.username}"/>
        <property name="password" value="${datasource.password}"/>
        <!--最大连接数量 -->
        <property name="maxActive" value="${datasource.max-active}"/>
        <!--初始化连接 -->
        <property name="initialSize" value="${datasource.initial-size}"/>
    </bean>
    <!-- sql session factory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath*:com/nacos/mapper/UserMapper.xml"/>
        <property name="configLocation" value="classpath:mybatis.xml"/>
        <property name="plugins">
            <array>
                <ref bean="paginationInterceptor"/>
            </array>
        </property>
    </bean>

    <bean id="paginationInterceptor"
          class="com.github.miemiedev.mybatis.paginator.OffsetLimitInterceptor">
        <property name="properties">
            <props>
                <prop key="dialectClass">com.github.miemiedev.mybatis.paginator.dialect.MySQLDialect
                </prop>
            </props>
        </property>
    </bean>


    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate"  destroy-method="close" scope="prototype">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.nacos.dao,com.nacos.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>
    <!-- 配置事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 通过AOP配置提供事务增强，让service包下所有Bean的所有方法拥有事务 -->
    <aop:config proxy-target-class="true">
        <aop:pointcut id="serviceMethod"
                      expression="(execution(* com.nacos.service.*.*(..)))"/>
        <aop:advisor pointcut-ref="serviceMethod" advice-ref="txAdvice"/>
    </aop:config>
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="remove*" propagation="REQUIRED"
                       rollback-for="java.lang.Exception"/>
            <tx:method name="modify*" propagation="REQUIRED"
                       rollback-for="java.lang.Exception"/>
            <tx:method name="insert*" propagation="REQUIRED"
                       rollback-for="java.lang.Exception"/>
            <tx:method name="update*" propagation="REQUIRED"
                       rollback-for="java.lang.Exception"/>
            <tx:method name="delete" propagation="REQUIRED"
                       rollback-for="java.lang.Exception"/>
            <tx:method name="*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <task:annotation-driven />

    <bean id="druid-stat-interceptor"
          class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
    </bean>

    <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
          scope="prototype">
        <property name="patterns">
            <list>
                <value>com.wanma.controller.*</value>
            </list>
        </property>
    </bean>

    <aop:config proxy-target-class="true">
        <aop:advisor advice-ref="druid-stat-interceptor"
                     pointcut-ref="druid-stat-pointcut"/>
    </aop:config>
</beans>
